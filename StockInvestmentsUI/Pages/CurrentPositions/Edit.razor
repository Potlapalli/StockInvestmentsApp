@page "/currentPositions/edit/{ticker}"
@inject ICurrentPositionRepository _repo
@inject NavigationManager _navigationManager
<h3 class="card-title">Update CurrentPosition</h3>
<hr/>
<br/>

@if (isFailed)
{
    <FailureMessage Message="Something went wrong with the update"></FailureMessage>
}

@if (Model == null)
{
    <LoadingMessage Message="Loading CurrentPosition For Update"></LoadingMessage>
}
else
{
    <EditForm Model="Model" OnValidSubmit="UpdateCurrentPosition">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="company"> Company </label>
            <InputText @bind-Value="Model.Company" class="form-control" id="company"></InputText>
        </div>
        <div class="form-group">
            <label for="totalshares"> TotalShares </label>
            <InputNumber @bind-Value="Model.TotalShares" @onblur="OnValueChanged" class="form-control" id="totalshares"></InputNumber>
        </div>
        <div class="form-group">
            <label for="purchaseprice"> PurchasePrice </label>
            <InputNumber @bind-Value="Model.PurchasePrice" @onblur="OnValueChanged" class="form-control" id="purchaseprice"></InputNumber>
        </div>
        <div class="form-group">
            <label for="totalamount"> TotalAmount </label>
            <InputNumber @bind-Value="Model.TotalAmount" class="form-control" id="totalamount"></InputNumber>
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil "></span>
            Update
        </button>
        
    </EditForm>
}
<br />

<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>



@code {
    [Parameter]
    public string Ticker { get; set; }

    private CurrentPosition Model = new CurrentPosition();
    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        Model = await _repo.Get(Endpoints.CurrentPositionsEndpoint, Ticker);
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/currentPositions/");
    }

    private async Task UpdateCurrentPosition()
    {
        bool isSuccess = await _repo.Update(Endpoints.CurrentPositionsEndpoint, Ticker, Model);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }

    private void OnValueChanged()
    {
        Model.TotalAmount = Model.PurchasePrice * Model.TotalShares;
    }



}

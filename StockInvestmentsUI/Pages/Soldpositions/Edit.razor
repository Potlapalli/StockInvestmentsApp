@page "/soldPositions/edit/{number}/{ticker}"
@inject ISoldPositionRepository _repo
@inject NavigationManager _navigationManager
@inject IToastService _toastService
<h3 class="card-title">Update SoldPosition</h3>
<hr />
<br />

@if (isFailed)
{
    <FailureMessage Message="Something went wrong with the SoldPosition update or ClosedPosition got created"></FailureMessage>
}

@if (Model == null)
{
    <LoadingMessage Message="Loading SoldPosition For Update"></LoadingMessage>
}
else
{
    <EditForm Model="Model" OnValidSubmit="UpdateSoldPosition">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="totalshares"> TotalShares </label>
            <InputNumber @bind-Value="Model.TotalShares" @onblur="OnValueChanged" class="form-control" id="totalshares"></InputNumber>
        </div>
        <div class="form-group">
            <label for="sellingprice"> SellingPrice </label>
            <InputNumber @bind-Value="Model.SellingPrice" @onblur="OnValueChanged" class="form-control" id="sellingprice"></InputNumber>
        </div>
        <div class="form-group">
            <label for="totalamount"> TotalAmount </label>
            <InputNumber @bind-Value="Model.TotalAmount" class="form-control" id="totalamount"></InputNumber>
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil "></span>
            Update
        </button>

    </EditForm>
}
<br />

<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>



@code {
    [Parameter]
    public string Number { get; set; }
    [Parameter]
    public string Ticker { get; set; }

    private SoldPosition Model = new SoldPosition();
    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        Model = await _repo.Get($"{Endpoints.CurrentPositionsEndpoint}{Ticker}/soldPositions/", Number);
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/soldPositions/");
    }

    private async Task UpdateSoldPosition()
    {
        bool isSuccess = await _repo.Update($"{Endpoints.CurrentPositionsEndpoint}{Ticker}/soldPositions/", Number, Model);
        if (isSuccess)
        {
            _toastService.ShowSuccess("SoldPosition updated successfully");
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }

    private void OnValueChanged()
    {
        Model.TotalAmount = Model.SellingPrice * Model.TotalShares;
    }



}

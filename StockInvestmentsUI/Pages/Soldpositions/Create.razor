@page "/soldPositions/create/"
@inject ISoldPositionRepository _repo
@inject NavigationManager _navigationManager
@inject IToastService _toastService
<h3 class="card-title">Create New SoldPosition</h3>
<hr />
<br />

@if (!isSuccess)
{
    <FailureMessage Message="Something went wrong with the create"></FailureMessage>
}

<EditForm Model="Model" OnValidSubmit="CreateSoldPosition">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="ticker"> Ticker </label>
        <InputText @bind-Value="Model.Ticker" class="form-control" id="ticker"></InputText>
    </div>
    <div class="form-group">
        <label for="totalshares"> TotalShares </label>
        <InputNumber @bind-Value="Model.TotalShares" @onblur="OnValueChanged" class="form-control" id="totalshares"></InputNumber>
    </div>
    <div class="form-group">
        <label for="sellingprice"> SellingPrice </label>
        <InputNumber @bind-Value="Model.SellingPrice" @onblur="OnValueChanged" class="form-control" id="sellingprice"></InputNumber>
    </div>
    <div class="form-group">
        <label for="totalamount"> TotalAmount </label>
        <InputNumber @bind-Value="Model.TotalAmount" class="form-control" id="totalamount"></InputNumber>
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil "></span>
        Create
    </button>
</EditForm>

<br />

<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>

@code {

    private SoldPosition Model = new SoldPosition();
    private bool isSuccess = true;

    private void BackToList()
    {
        _navigationManager.NavigateTo("/soldPositions/");
    }

    private async Task CreateSoldPosition()
    {
        isSuccess = await _repo.Create($"{Endpoints.CurrentPositionsEndpoint}{Model.Ticker}/soldPositions/", Model);
        if (isSuccess)
        {
            _toastService.ShowSuccess("SoldPosition created successfully");
            BackToList();
        }
    }

    private void OnValueChanged()
    {
        Model.TotalAmount = Model.SellingPrice * Model.TotalShares;
    }
}
